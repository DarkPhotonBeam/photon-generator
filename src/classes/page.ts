import {mkdir, rm, writeFile} from "fs/promises";
import {join, resolve} from "path";
import copyDir from "../helpers/copyDir";
import {textTemplate} from "../helpers/templates";
import {SIGNATURE_FILE_NAME} from "../constants/paths";
import {existsSync} from "fs";
import chalk from "chalk";

export class Page {
  subpages: Page[];
  title: string;
  body: string;
  path: string;
  outputDir: string = "docs";
  name: string = "";

  constructor(outputDir: string = "docs") {
    this.subpages = [];
    this.title = "";
    this.body = "";
    this.path = "";
    this.outputDir = outputDir;
  }

  generateNavHTML(recursive: boolean = false) {
    let str = "<ul>";
    for (let i = 0; i < this.subpages.length; i++) {
      const pathEnd = this.subpages[i].path.split("/");
      const pathEndStr = pathEnd[pathEnd.length - 1];
      str += `<li><a href="/${this.subpages[i].path}">${
        this.subpages[i].name === ""
          ? this.subpages[i].title === ""
            ? pathEndStr
            : this.subpages[i].title
          : this.subpages[i].name
      }</a>${recursive ? this.subpages[i].generateNavHTML(true) : ""}</li>`;
    }
    str += "</ul>";
    return str;
  }

  compare(page: Page): boolean {
    if (page.subpages.length !== this.subpages.length || page.title !== this.title || page.body !== this.body || page.path !== this.path || page.outputDir !== this.outputDir || page.name !== this.name) return false;
    for (let i = 0; i < page.subpages.length; i++) {
      let res = page.subpages[i].compare(this.subpages[i]);
      if (!res) return false;
    }
    return true;
  }

  async build() {
    await writeFile(
      resolve(process.cwd(), this.outputDir, this.path, "index.html"),
      textTemplate(this.title, this.body, this.subpages.length > 0 ? this.generateNavHTML(false) : "")
    );
    for (let i = 0; i < this.subpages.length; i++) {
      await mkdir(
        resolve(process.cwd(), this.outputDir, this.subpages[i].path)
      );
      await this.subpages[i].build();
    }
  }
}

export class PageRoot extends Page {
  async buildRoot() {
    try {
      if (
        existsSync(resolve(process.cwd(), this.outputDir)) &&
        !existsSync(resolve(process.cwd(), this.outputDir, SIGNATURE_FILE_NAME))
      ) {
        console.warn(
          chalk.yellow(
            `The "${this.outputDir}" folder you are trying to overwrite may not be generated by photon-generator. Are you sure you are in the right directory? (If yes you can add an empty file called "${SIGNATURE_FILE_NAME}" in your "${this.outputDir}" folder and try again)`
          )
        );
        return false;
      }
      await rm(resolve(process.cwd(), this.outputDir), {
        force: true,
        recursive: true,
      });
      try {
        await mkdir(resolve(process.cwd(), this.outputDir));
        await writeFile(
          resolve(process.cwd(), this.outputDir, SIGNATURE_FILE_NAME),
          ""
        );
        try {
          await mkdir(resolve(process.cwd(), this.outputDir, "assets"));
          if (existsSync(resolve(process.cwd(), "pages", "assets")))
            await copyDir(
              join(process.cwd(), "pages", "assets"),
              join(process.cwd(), this.outputDir, "assets")
            );
          await mkdir(resolve(process.cwd(), this.outputDir, "css"));
          if (existsSync(resolve(process.cwd(), "pages", "css")))
            await copyDir(
              join(process.cwd(), "pages", "css"),
              join(process.cwd(), this.outputDir, "css")
            );
          else {
            await copyDir(
              join(__dirname, "..", "css"),
              join(process.cwd(), this.outputDir, "css")
            );
          }
          await this.build();
          return true;
        } catch (e: any) {
          console.error(
            `Failed to create assets folder with error: ${e.message}`
          );
        }
      } catch (e: any) {
        console.error(
          `Failed to create output folder "${this.outputDir}" with error: ${e.message}`
        );
      }
    } catch (e: any) {
      console.error(
        `Failed to delete old output folder with error: ${e.message}`
      );
    }
    return false;
  }

  compareRoot(root: PageRoot): boolean {


    return false;
  }

  generateNav() {}
}
